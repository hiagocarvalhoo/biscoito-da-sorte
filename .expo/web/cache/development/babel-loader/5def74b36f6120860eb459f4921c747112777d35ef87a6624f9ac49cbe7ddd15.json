{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport * as React from 'react';\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { assertStatusValuesInBounds, getNativeSourceAndFullInitialStatusForLoadAsync, getNativeSourceFromSource, getUnloadedStatus, PlaybackMixin } from \"./AV\";\nimport ExpoVideoManager from \"./ExpoVideoManager\";\nimport ExponentAV from \"./ExponentAV\";\nimport ExponentVideo from \"./ExponentVideo\";\nimport { ResizeMode } from \"./Video.types\";\nvar _STYLES = StyleSheet.create({\n  base: {\n    overflow: 'hidden'\n  },\n  poster: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    resizeMode: 'contain'\n  },\n  video: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0\n  }\n});\nvar ExpoVideoManagerConstants = ExpoVideoManager;\nvar ExpoVideoViewManager = ExpoVideoManager;\nvar Video = function (_React$Component) {\n  _inherits(Video, _React$Component);\n  var _super = _createSuper(Video);\n  function Video(props) {\n    var _this;\n    _classCallCheck(this, Video);\n    _this = _super.call(this, props);\n    _this._nativeRef = React.createRef();\n    _this._onPlaybackStatusUpdate = null;\n    _this._handleNewStatus = function (status) {\n      if (_this.state.showPoster && status.isLoaded && (status.isPlaying || status.positionMillis !== 0)) {\n        _this.setState({\n          showPoster: false\n        });\n      }\n      if (_this.props.onPlaybackStatusUpdate) {\n        _this.props.onPlaybackStatusUpdate(status);\n      }\n      if (_this._onPlaybackStatusUpdate) {\n        _this._onPlaybackStatusUpdate(status);\n      }\n    };\n    _this._performOperationAndHandleStatusAsync = function _callee(operation) {\n      var video, handle, status;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            video = _this._nativeRef.current;\n            if (video) {\n              _context.next = 3;\n              break;\n            }\n            throw new Error(\"Cannot complete operation because the Video component has not yet loaded\");\n          case 3:\n            handle = findNodeHandle(_this._nativeRef.current);\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(operation(handle));\n          case 6:\n            status = _context.sent;\n            _this._handleNewStatus(status);\n            return _context.abrupt(\"return\", status);\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }, null, null, null, Promise);\n    };\n    _this._setFullscreen = function _callee2(value) {\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            return _context2.abrupt(\"return\", _this._performOperationAndHandleStatusAsync(function (tag) {\n              return ExpoVideoViewManager.setFullscreen(tag, value);\n            }));\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, null, null, null, Promise);\n    };\n    _this.presentFullscreenPlayer = function _callee3() {\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            return _context3.abrupt(\"return\", _this._setFullscreen(true));\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, null, null, null, Promise);\n    };\n    _this.dismissFullscreenPlayer = function _callee4() {\n      return _regeneratorRuntime.async(function _callee4$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            return _context4.abrupt(\"return\", _this._setFullscreen(false));\n          case 1:\n          case \"end\":\n            return _context4.stop();\n        }\n      }, null, null, null, Promise);\n    };\n    _this.getStatusAsync = function _callee5() {\n      return _regeneratorRuntime.async(function _callee5$(_context5) {\n        while (1) switch (_context5.prev = _context5.next) {\n          case 0:\n            return _context5.abrupt(\"return\", _this._performOperationAndHandleStatusAsync(function (tag) {\n              return ExponentAV.getStatusForVideo(tag);\n            }));\n          case 1:\n          case \"end\":\n            return _context5.stop();\n        }\n      }, null, null, null, Promise);\n    };\n    _this.loadAsync = function _callee6(source) {\n      var initialStatus,\n        downloadFirst,\n        _await$getNativeSourc,\n        nativeSource,\n        fullInitialStatus,\n        _args6 = arguments;\n      return _regeneratorRuntime.async(function _callee6$(_context6) {\n        while (1) switch (_context6.prev = _context6.next) {\n          case 0:\n            initialStatus = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : {};\n            downloadFirst = _args6.length > 2 && _args6[2] !== undefined ? _args6[2] : true;\n            _context6.next = 4;\n            return _regeneratorRuntime.awrap(getNativeSourceAndFullInitialStatusForLoadAsync(source, initialStatus, downloadFirst));\n          case 4:\n            _await$getNativeSourc = _context6.sent;\n            nativeSource = _await$getNativeSourc.nativeSource;\n            fullInitialStatus = _await$getNativeSourc.fullInitialStatus;\n            return _context6.abrupt(\"return\", _this._performOperationAndHandleStatusAsync(function (tag) {\n              return ExponentAV.loadForVideo(tag, nativeSource, fullInitialStatus);\n            }));\n          case 8:\n          case \"end\":\n            return _context6.stop();\n        }\n      }, null, null, null, Promise);\n    };\n    _this.unloadAsync = function _callee7() {\n      return _regeneratorRuntime.async(function _callee7$(_context7) {\n        while (1) switch (_context7.prev = _context7.next) {\n          case 0:\n            return _context7.abrupt(\"return\", _this._performOperationAndHandleStatusAsync(function (tag) {\n              return ExponentAV.unloadForVideo(tag);\n            }));\n          case 1:\n          case \"end\":\n            return _context7.stop();\n        }\n      }, null, null, null, Promise);\n    };\n    _this.setStatusAsync = function _callee8(status) {\n      return _regeneratorRuntime.async(function _callee8$(_context8) {\n        while (1) switch (_context8.prev = _context8.next) {\n          case 0:\n            assertStatusValuesInBounds(status);\n            return _context8.abrupt(\"return\", _this._performOperationAndHandleStatusAsync(function (tag) {\n              return ExponentAV.setStatusForVideo(tag, status);\n            }));\n          case 2:\n          case \"end\":\n            return _context8.stop();\n        }\n      }, null, null, null, Promise);\n    };\n    _this.replayAsync = function _callee9() {\n      var status,\n        _args9 = arguments;\n      return _regeneratorRuntime.async(function _callee9$(_context9) {\n        while (1) switch (_context9.prev = _context9.next) {\n          case 0:\n            status = _args9.length > 0 && _args9[0] !== undefined ? _args9[0] : {};\n            if (!(status.positionMillis && status.positionMillis !== 0)) {\n              _context9.next = 3;\n              break;\n            }\n            throw new Error('Requested position after replay has to be 0.');\n          case 3:\n            return _context9.abrupt(\"return\", _this._performOperationAndHandleStatusAsync(function (tag) {\n              return ExponentAV.replayVideo(tag, _objectSpread(_objectSpread({}, status), {}, {\n                positionMillis: 0,\n                shouldPlay: true\n              }));\n            }));\n          case 4:\n          case \"end\":\n            return _context9.stop();\n        }\n      }, null, null, null, Promise);\n    };\n    _this._nativeOnPlaybackStatusUpdate = function (event) {\n      _this._handleNewStatus(event.nativeEvent);\n    };\n    _this._nativeOnLoadStart = function () {\n      if (_this.props.onLoadStart) {\n        _this.props.onLoadStart();\n      }\n    };\n    _this._nativeOnLoad = function (event) {\n      if (_this.props.onLoad) {\n        _this.props.onLoad(event.nativeEvent);\n      }\n      _this._handleNewStatus(event.nativeEvent);\n    };\n    _this._nativeOnError = function (event) {\n      var error = event.nativeEvent.error;\n      if (_this.props.onError) {\n        _this.props.onError(error);\n      }\n      _this._handleNewStatus(getUnloadedStatus(error));\n    };\n    _this._nativeOnReadyForDisplay = function (event) {\n      if (_this.props.onReadyForDisplay) {\n        _this.props.onReadyForDisplay(event.nativeEvent);\n      }\n    };\n    _this._nativeOnFullscreenUpdate = function (event) {\n      if (_this.props.onFullscreenUpdate) {\n        _this.props.onFullscreenUpdate(event.nativeEvent);\n      }\n    };\n    _this._renderPoster = function () {\n      return _this.props.usePoster && _this.state.showPoster ? React.createElement(Image, {\n        style: [_STYLES.poster, _this.props.posterStyle],\n        source: _this.props.posterSource\n      }) : null;\n    };\n    _this.state = {\n      showPoster: !!props.usePoster\n    };\n    return _this;\n  }\n  _createClass(Video, [{\n    key: \"setNativeProps\",\n    value: function setNativeProps(nativeProps) {\n      var nativeVideo = this._nativeRef.current;\n      if (!nativeVideo) throw new Error(\"native video reference is not defined.\");\n      nativeVideo.setNativeProps(nativeProps);\n    }\n  }, {\n    key: \"setOnPlaybackStatusUpdate\",\n    value: function setOnPlaybackStatusUpdate(onPlaybackStatusUpdate) {\n      this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n      this.getStatusAsync();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var source = getNativeSourceFromSource(this.props.source) || undefined;\n      var nativeResizeMode = ExpoVideoManagerConstants.ScaleNone;\n      if (this.props.resizeMode) {\n        var resizeMode = this.props.resizeMode;\n        if (resizeMode === ResizeMode.STRETCH) {\n          nativeResizeMode = ExpoVideoManagerConstants.ScaleToFill;\n        } else if (resizeMode === ResizeMode.CONTAIN) {\n          nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFit;\n        } else if (resizeMode === ResizeMode.COVER) {\n          nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFill;\n        }\n      }\n      var status = _objectSpread({}, this.props.status);\n      ['progressUpdateIntervalMillis', 'positionMillis', 'shouldPlay', 'rate', 'shouldCorrectPitch', 'volume', 'isMuted', 'isLooping'].forEach(function (prop) {\n        if (prop in _this2.props) {\n          status[prop] = _this2.props[prop];\n        }\n      });\n      var nativeProps = _objectSpread(_objectSpread({}, omit(this.props, ['source', 'onPlaybackStatusUpdate', 'usePoster', 'posterSource', 'posterStyle'].concat(_toConsumableArray(Object.keys(status))))), {}, {\n        style: StyleSheet.flatten([_STYLES.base, this.props.style]),\n        source: source,\n        resizeMode: nativeResizeMode,\n        status: status,\n        onStatusUpdate: this._nativeOnPlaybackStatusUpdate,\n        onLoadStart: this._nativeOnLoadStart,\n        onLoad: this._nativeOnLoad,\n        onError: this._nativeOnError,\n        onReadyForDisplay: this._nativeOnReadyForDisplay,\n        onFullscreenUpdate: this._nativeOnFullscreenUpdate\n      });\n      return React.createElement(View, {\n        style: nativeProps.style,\n        pointerEvents: \"box-none\"\n      }, React.createElement(ExponentVideo, _objectSpread(_objectSpread({\n        ref: this._nativeRef\n      }, nativeProps), {}, {\n        style: _STYLES.video\n      })), this._renderPoster());\n    }\n  }]);\n  return Video;\n}(React.Component);\nfunction omit(props, propNames) {\n  var copied = _objectSpread({}, props);\n  for (var _iterator = _createForOfIteratorHelperLoose(propNames), _step; !(_step = _iterator()).done;) {\n    var propName = _step.value;\n    delete copied[propName];\n  }\n  return copied;\n}\n_extends(Video.prototype, PlaybackMixin);\nexport default Video;","map":{"version":3,"names":["React","findNodeHandle","Image","StyleSheet","View","assertStatusValuesInBounds","getNativeSourceAndFullInitialStatusForLoadAsync","getNativeSourceFromSource","getUnloadedStatus","PlaybackMixin","ExpoVideoManager","ExponentAV","ExponentVideo","ResizeMode","_STYLES","create","base","overflow","poster","position","left","top","right","bottom","resizeMode","video","ExpoVideoManagerConstants","ExpoVideoViewManager","Video","_React$Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","_nativeRef","createRef","_onPlaybackStatusUpdate","_handleNewStatus","status","state","showPoster","isLoaded","isPlaying","positionMillis","setState","onPlaybackStatusUpdate","_performOperationAndHandleStatusAsync","_callee","operation","handle","_regeneratorRuntime","async","_callee$","_context","prev","next","current","Error","awrap","sent","abrupt","stop","Promise","_setFullscreen","_callee2","value","_callee2$","_context2","tag","setFullscreen","presentFullscreenPlayer","_callee3","_callee3$","_context3","dismissFullscreenPlayer","_callee4","_callee4$","_context4","getStatusAsync","_callee5","_callee5$","_context5","getStatusForVideo","loadAsync","_callee6","source","initialStatus","downloadFirst","_await$getNativeSourc","nativeSource","fullInitialStatus","_args6","arguments","_callee6$","_context6","length","undefined","loadForVideo","unloadAsync","_callee7","_callee7$","_context7","unloadForVideo","setStatusAsync","_callee8","_callee8$","_context8","setStatusForVideo","replayAsync","_callee9","_args9","_callee9$","_context9","replayVideo","_objectSpread","shouldPlay","_nativeOnPlaybackStatusUpdate","event","nativeEvent","_nativeOnLoadStart","onLoadStart","_nativeOnLoad","onLoad","_nativeOnError","error","onError","_nativeOnReadyForDisplay","onReadyForDisplay","_nativeOnFullscreenUpdate","onFullscreenUpdate","_renderPoster","usePoster","createElement","style","posterStyle","posterSource","_createClass","key","setNativeProps","nativeProps","nativeVideo","setOnPlaybackStatusUpdate","render","_this2","nativeResizeMode","ScaleNone","STRETCH","ScaleToFill","CONTAIN","ScaleAspectFit","COVER","ScaleAspectFill","forEach","prop","omit","concat","_toConsumableArray","Object","keys","flatten","onStatusUpdate","pointerEvents","ref","Component","propNames","copied","_iterator","_createForOfIteratorHelperLoose","_step","done","propName","_extends","prototype"],"sources":["C:\\Users\\Pc02\\Desktop\\Biscoito\\biscoito-da-sorte\\node_modules\\expo-av\\src\\Video.tsx"],"sourcesContent":["import * as React from 'react';\nimport { findNodeHandle, Image, NativeMethods, StyleSheet, View } from 'react-native';\n\nimport {\n  assertStatusValuesInBounds,\n  getNativeSourceAndFullInitialStatusForLoadAsync,\n  getNativeSourceFromSource,\n  getUnloadedStatus,\n  Playback,\n  PlaybackMixin,\n  AVPlaybackSource,\n  AVPlaybackStatus,\n  AVPlaybackStatusToSet,\n  AVPlaybackTolerance,\n} from './AV';\nimport ExpoVideoManager from './ExpoVideoManager';\nimport ExponentAV from './ExponentAV';\nimport ExponentVideo from './ExponentVideo';\nimport {\n  ExponentVideoComponent,\n  VideoFullscreenUpdateEvent,\n  VideoNativeProps,\n  VideoProps,\n  VideoReadyForDisplayEvent,\n  ResizeMode,\n  VideoState,\n} from './Video.types';\n\nconst _STYLES = StyleSheet.create({\n  base: {\n    overflow: 'hidden',\n  },\n  poster: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    resizeMode: 'contain',\n  },\n  video: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n  },\n});\n\n// On a real device UIManager should be present, however when running offline tests with jest-expo\n// we have to use the provided native module mock to access constants\nconst ExpoVideoManagerConstants = ExpoVideoManager;\nconst ExpoVideoViewManager = ExpoVideoManager;\n\nclass Video extends React.Component<VideoProps, VideoState> implements Playback {\n  _nativeRef = React.createRef<InstanceType<ExponentVideoComponent> & NativeMethods>();\n  _onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null;\n\n  constructor(props: VideoProps) {\n    super(props);\n    this.state = {\n      showPoster: !!props.usePoster,\n    };\n  }\n\n  /**\n   * @hidden\n   */\n  setNativeProps(nativeProps: VideoNativeProps) {\n    const nativeVideo = this._nativeRef.current;\n    if (!nativeVideo) throw new Error(`native video reference is not defined.`);\n    nativeVideo.setNativeProps(nativeProps);\n  }\n\n  // Internal methods\n\n  _handleNewStatus = (status: AVPlaybackStatus) => {\n    if (\n      this.state.showPoster &&\n      status.isLoaded &&\n      (status.isPlaying || status.positionMillis !== 0)\n    ) {\n      this.setState({ showPoster: false });\n    }\n\n    if (this.props.onPlaybackStatusUpdate) {\n      this.props.onPlaybackStatusUpdate(status);\n    }\n    if (this._onPlaybackStatusUpdate) {\n      this._onPlaybackStatusUpdate(status);\n    }\n  };\n\n  _performOperationAndHandleStatusAsync = async (\n    operation: (tag: number) => Promise<AVPlaybackStatus>\n  ): Promise<AVPlaybackStatus> => {\n    const video = this._nativeRef.current;\n    if (!video) {\n      throw new Error(`Cannot complete operation because the Video component has not yet loaded`);\n    }\n\n    const handle = findNodeHandle(this._nativeRef.current)!;\n    const status: AVPlaybackStatus = await operation(handle);\n    this._handleNewStatus(status);\n    return status;\n  };\n\n  // Fullscreening API\n\n  _setFullscreen = async (value: boolean): Promise<AVPlaybackStatus> => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExpoVideoViewManager.setFullscreen(tag, value)\n    );\n  };\n\n  /**\n   * This presents a fullscreen view of your video component on top of your app's UI. Note that even if `useNativeControls` is set to `false`,\n   * native controls will be visible in fullscreen mode.\n   * @return A `Promise` that is fulfilled with the `AVPlaybackStatus` of the video once the fullscreen player has finished presenting,\n   * or rejects if there was an error, or if this was called on an Android device.\n   */\n  presentFullscreenPlayer = async (): Promise<AVPlaybackStatus> => {\n    return this._setFullscreen(true);\n  };\n\n  /**\n   * This dismisses the fullscreen video view.\n   * @return A `Promise` that is fulfilled with the `AVPlaybackStatus` of the video once the fullscreen player has finished dismissing,\n   * or rejects if there was an error, or if this was called on an Android device.\n   */\n  dismissFullscreenPlayer = async (): Promise<AVPlaybackStatus> => {\n    return this._setFullscreen(false);\n  };\n\n  // ### Unified playback API ### (consistent with Audio.js)\n  // All calls automatically call onPlaybackStatusUpdate as a side effect.\n\n  /**\n   * @hidden\n   */\n  getStatusAsync = async (): Promise<AVPlaybackStatus> => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.getStatusForVideo(tag)\n    );\n  };\n\n  /**\n   * @hidden\n   */\n  loadAsync = async (\n    source: AVPlaybackSource,\n    initialStatus: AVPlaybackStatusToSet = {},\n    downloadFirst: boolean = true\n  ): Promise<AVPlaybackStatus> => {\n    const { nativeSource, fullInitialStatus } =\n      await getNativeSourceAndFullInitialStatusForLoadAsync(source, initialStatus, downloadFirst);\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.loadForVideo(tag, nativeSource, fullInitialStatus)\n    );\n  };\n\n  /**\n   * Equivalent to setting URI to `null`.\n   * @hidden\n   */\n  unloadAsync = async (): Promise<AVPlaybackStatus> => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.unloadForVideo(tag)\n    );\n  };\n\n  /**\n   * Set status API, only available while `isLoaded = true`.\n   * @hidden\n   */\n  setStatusAsync = async (status: AVPlaybackStatusToSet): Promise<AVPlaybackStatus> => {\n    assertStatusValuesInBounds(status);\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.setStatusForVideo(tag, status)\n    );\n  };\n\n  /**\n   * @hidden\n   */\n  replayAsync = async (status: AVPlaybackStatusToSet = {}): Promise<AVPlaybackStatus> => {\n    if (status.positionMillis && status.positionMillis !== 0) {\n      throw new Error('Requested position after replay has to be 0.');\n    }\n\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.replayVideo(tag, {\n        ...status,\n        positionMillis: 0,\n        shouldPlay: true,\n      })\n    );\n  };\n\n  /**\n   * @hidden\n   */\n  setOnPlaybackStatusUpdate(onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null) {\n    this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n    this.getStatusAsync();\n  }\n\n  // Methods of the Playback interface that are set via PlaybackMixin\n  playAsync!: () => Promise<AVPlaybackStatus>;\n  playFromPositionAsync!: (\n    positionMillis: number,\n    tolerances?: AVPlaybackTolerance\n  ) => Promise<AVPlaybackStatus>;\n  pauseAsync!: () => Promise<AVPlaybackStatus>;\n  stopAsync!: () => Promise<AVPlaybackStatus>;\n  setPositionAsync!: (\n    positionMillis: number,\n    tolerances?: AVPlaybackTolerance\n  ) => Promise<AVPlaybackStatus>;\n  setRateAsync!: (rate: number, shouldCorrectPitch: boolean) => Promise<AVPlaybackStatus>;\n  setVolumeAsync!: (volume: number) => Promise<AVPlaybackStatus>;\n  setIsMutedAsync!: (isMuted: boolean) => Promise<AVPlaybackStatus>;\n  setIsLoopingAsync!: (isLooping: boolean) => Promise<AVPlaybackStatus>;\n  setProgressUpdateIntervalAsync!: (\n    progressUpdateIntervalMillis: number\n  ) => Promise<AVPlaybackStatus>;\n\n  // Callback wrappers\n\n  _nativeOnPlaybackStatusUpdate = (event: { nativeEvent: AVPlaybackStatus }) => {\n    this._handleNewStatus(event.nativeEvent);\n  };\n\n  // TODO make sure we are passing the right stuff\n  _nativeOnLoadStart = () => {\n    if (this.props.onLoadStart) {\n      this.props.onLoadStart();\n    }\n  };\n\n  _nativeOnLoad = (event: { nativeEvent: AVPlaybackStatus }) => {\n    if (this.props.onLoad) {\n      this.props.onLoad(event.nativeEvent);\n    }\n    this._handleNewStatus(event.nativeEvent);\n  };\n\n  _nativeOnError = (event: { nativeEvent: { error: string } }) => {\n    const error: string = event.nativeEvent.error;\n    if (this.props.onError) {\n      this.props.onError(error);\n    }\n    this._handleNewStatus(getUnloadedStatus(error));\n  };\n\n  _nativeOnReadyForDisplay = (event: { nativeEvent: VideoReadyForDisplayEvent }) => {\n    if (this.props.onReadyForDisplay) {\n      this.props.onReadyForDisplay(event.nativeEvent);\n    }\n  };\n\n  _nativeOnFullscreenUpdate = (event: { nativeEvent: VideoFullscreenUpdateEvent }) => {\n    if (this.props.onFullscreenUpdate) {\n      this.props.onFullscreenUpdate(event.nativeEvent);\n    }\n  };\n\n  _renderPoster = () =>\n    this.props.usePoster && this.state.showPoster ? (\n      <Image style={[_STYLES.poster, this.props.posterStyle]} source={this.props.posterSource!} />\n    ) : null;\n\n  render() {\n    const source = getNativeSourceFromSource(this.props.source) || undefined;\n\n    let nativeResizeMode = ExpoVideoManagerConstants.ScaleNone;\n    if (this.props.resizeMode) {\n      const resizeMode = this.props.resizeMode;\n      if (resizeMode === ResizeMode.STRETCH) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleToFill;\n      } else if (resizeMode === ResizeMode.CONTAIN) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFit;\n      } else if (resizeMode === ResizeMode.COVER) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFill;\n      }\n    }\n\n    // Set status via individual props\n    const status: AVPlaybackStatusToSet = { ...this.props.status };\n    [\n      'progressUpdateIntervalMillis',\n      'positionMillis',\n      'shouldPlay',\n      'rate',\n      'shouldCorrectPitch',\n      'volume',\n      'isMuted',\n      'isLooping',\n    ].forEach((prop) => {\n      if (prop in this.props) {\n        status[prop] = this.props[prop];\n      }\n    });\n\n    // Replace selected native props\n    const nativeProps: VideoNativeProps = {\n      ...omit(this.props, [\n        'source',\n        'onPlaybackStatusUpdate',\n        'usePoster',\n        'posterSource',\n        'posterStyle',\n        ...Object.keys(status),\n      ]),\n      style: StyleSheet.flatten([_STYLES.base, this.props.style]),\n      source,\n      resizeMode: nativeResizeMode,\n      status,\n      onStatusUpdate: this._nativeOnPlaybackStatusUpdate,\n      onLoadStart: this._nativeOnLoadStart,\n      onLoad: this._nativeOnLoad,\n      onError: this._nativeOnError,\n      onReadyForDisplay: this._nativeOnReadyForDisplay,\n      onFullscreenUpdate: this._nativeOnFullscreenUpdate,\n    };\n\n    return (\n      <View style={nativeProps.style} pointerEvents=\"box-none\">\n        <ExponentVideo ref={this._nativeRef} {...nativeProps} style={_STYLES.video} />\n        {this._renderPoster()}\n      </View>\n    );\n  }\n}\n\nfunction omit(props: Record<string, any>, propNames: string[]) {\n  const copied = { ...props };\n  for (const propName of propNames) {\n    delete copied[propName];\n  }\n  return copied;\n}\n\nObject.assign(Video.prototype, PlaybackMixin);\n\n// note(simek): TypeDoc cannot resolve correctly name of inline and default exported class\nexport default Video;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}