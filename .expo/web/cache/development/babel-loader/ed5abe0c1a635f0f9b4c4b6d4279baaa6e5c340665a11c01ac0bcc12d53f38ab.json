{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar _class;\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { EventEmitter, Platform, UnavailabilityError } from 'expo-modules-core';\nimport { PlaybackMixin, assertStatusValuesInBounds, getNativeSourceAndFullInitialStatusForLoadAsync, getUnloadedStatus } from \"../AV\";\nimport ExponentAV from \"../ExponentAV\";\nimport { throwIfAudioIsDisabled } from \"./AudioAvailability\";\nexport var Sound = function () {\n  function Sound() {\n    var _this = this;\n    _classCallCheck(this, Sound);\n    this._loaded = false;\n    this._loading = false;\n    this._key = null;\n    this._lastStatusUpdate = null;\n    this._lastStatusUpdateTime = null;\n    this._subscriptions = [];\n    this._eventEmitter = new EventEmitter(ExponentAV);\n    this._coalesceStatusUpdatesInMillis = 100;\n    this._onPlaybackStatusUpdate = null;\n    this._onMetadataUpdate = null;\n    this._onAudioSampleReceived = null;\n    this._internalStatusUpdateCallback = function (_ref) {\n      var key = _ref.key,\n        status = _ref.status;\n      if (_this._key === key) {\n        _this._callOnPlaybackStatusUpdateForNewStatus(status);\n      }\n    };\n    this._internalMetadataUpdateCallback = function (_ref2) {\n      var key = _ref2.key,\n        metadata = _ref2.metadata;\n      if (_this._key === key) {\n        _this._onMetadataUpdate == null ? void 0 : _this._onMetadataUpdate(metadata);\n      }\n    };\n    this._internalErrorCallback = function (_ref3) {\n      var key = _ref3.key,\n        error = _ref3.error;\n      if (_this._key === key) {\n        _this._errorCallback(error);\n      }\n    };\n    this._errorCallback = function (error) {\n      _this._clearSubscriptions();\n      _this._loaded = false;\n      _this._key = null;\n      _this._callOnPlaybackStatusUpdateForNewStatus(getUnloadedStatus(error));\n    };\n    this.getStatusAsync = function _callee() {\n      var status;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            if (!_this._loaded) {\n              _context.next = 2;\n              break;\n            }\n            return _context.abrupt(\"return\", _this._performOperationAndHandleStatusAsync(function () {\n              return ExponentAV.getStatusForSound(_this._key);\n            }));\n          case 2:\n            status = getUnloadedStatus();\n            _this._callOnPlaybackStatusUpdateForNewStatus(status);\n            return _context.abrupt(\"return\", status);\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }, null, null, null, Promise);\n    };\n  }\n  _createClass(Sound, [{\n    key: \"_callOnPlaybackStatusUpdateForNewStatus\",\n    value: function _callOnPlaybackStatusUpdateForNewStatus(status) {\n      var shouldDismissBasedOnCoalescing = this._lastStatusUpdateTime && JSON.stringify(status) === this._lastStatusUpdate && Date.now() - this._lastStatusUpdateTime.getTime() < this._coalesceStatusUpdatesInMillis;\n      if (this._onPlaybackStatusUpdate != null && !shouldDismissBasedOnCoalescing) {\n        this._onPlaybackStatusUpdate(status);\n        this._lastStatusUpdateTime = new Date();\n        this._lastStatusUpdate = JSON.stringify(status);\n      }\n    }\n  }, {\n    key: \"_performOperationAndHandleStatusAsync\",\n    value: function _performOperationAndHandleStatusAsync(operation) {\n      var status;\n      return _regeneratorRuntime.async(function _performOperationAndHandleStatusAsync$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            throwIfAudioIsDisabled();\n            if (!this._loaded) {\n              _context2.next = 9;\n              break;\n            }\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(operation());\n          case 4:\n            status = _context2.sent;\n            this._callOnPlaybackStatusUpdateForNewStatus(status);\n            return _context2.abrupt(\"return\", status);\n          case 9:\n            throw new Error('Cannot complete operation because sound is not loaded.');\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"_updateAudioSampleReceivedCallback\",\n    value: function _updateAudioSampleReceivedCallback() {\n      if (global.__EXAV_setOnAudioSampleReceivedCallback == null) {\n        if (Platform.OS === 'ios' || Platform.OS === 'android') {\n          console.warn('expo-av: Failed to set up Audio Sample Buffer callback. ' + \"Do you have 'Remote Debugging' enabled in your app's Developer Menu (https://docs.expo.dev/workflow/debugging)? \" + 'Audio Sample Buffer callbacks are not supported while using Remote Debugging, you will need to disable it to use them.');\n          return;\n        } else {\n          throw new UnavailabilityError('expo-av', 'setOnAudioSampleReceived');\n        }\n      }\n      if (this._key == null) {\n        throw new Error('Cannot set Audio Sample Buffer callback when the Sound instance has not been successfully loaded/initialized!');\n      }\n      if (typeof this._key !== 'number') {\n        throw new Error(\"Cannot set Audio Sample Buffer callback when Sound instance key is of type \" + typeof this._key + \"! (expected: number)\");\n      }\n      global.__EXAV_setOnAudioSampleReceivedCallback(this._key, this._onAudioSampleReceived);\n    }\n  }, {\n    key: \"_subscribeToNativeEvents\",\n    value: function _subscribeToNativeEvents() {\n      if (this._loaded) {\n        this._subscriptions.push(this._eventEmitter.addListener('didUpdatePlaybackStatus', this._internalStatusUpdateCallback), this._eventEmitter.addListener('didUpdateMetadata', this._internalMetadataUpdateCallback));\n        this._subscriptions.push(this._eventEmitter.addListener('ExponentAV.onError', this._internalErrorCallback));\n      }\n    }\n  }, {\n    key: \"_clearSubscriptions\",\n    value: function _clearSubscriptions() {\n      this._subscriptions.forEach(function (e) {\n        return e.remove();\n      });\n      this._subscriptions = [];\n    }\n  }, {\n    key: \"setOnPlaybackStatusUpdate\",\n    value: function setOnPlaybackStatusUpdate(onPlaybackStatusUpdate) {\n      this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n      this.getStatusAsync();\n    }\n  }, {\n    key: \"setOnMetadataUpdate\",\n    value: function setOnMetadataUpdate(onMetadataUpdate) {\n      this._onMetadataUpdate = onMetadataUpdate;\n    }\n  }, {\n    key: \"setOnAudioSampleReceived\",\n    value: function setOnAudioSampleReceived(callback) {\n      this._onAudioSampleReceived = callback;\n      if (this._key != null) {\n        this._updateAudioSampleReceivedCallback();\n      }\n    }\n  }, {\n    key: \"loadAsync\",\n    value: function loadAsync(source) {\n      var _this2 = this;\n      var initialStatus,\n        downloadFirst,\n        _await$getNativeSourc,\n        nativeSource,\n        fullInitialStatus,\n        _args3 = arguments;\n      return _regeneratorRuntime.async(function loadAsync$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            initialStatus = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};\n            downloadFirst = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : true;\n            throwIfAudioIsDisabled();\n            if (!this._loading) {\n              _context3.next = 5;\n              break;\n            }\n            throw new Error('The Sound is already loading.');\n          case 5:\n            if (this._loaded) {\n              _context3.next = 15;\n              break;\n            }\n            this._loading = true;\n            _context3.next = 9;\n            return _regeneratorRuntime.awrap(getNativeSourceAndFullInitialStatusForLoadAsync(source, initialStatus, downloadFirst));\n          case 9:\n            _await$getNativeSourc = _context3.sent;\n            nativeSource = _await$getNativeSourc.nativeSource;\n            fullInitialStatus = _await$getNativeSourc.fullInitialStatus;\n            return _context3.abrupt(\"return\", new Promise(function (resolve, reject) {\n              var loadSuccess = function loadSuccess(result) {\n                var _result = _slicedToArray(result, 2),\n                  key = _result[0],\n                  status = _result[1];\n                _this2._key = key;\n                _this2._loaded = true;\n                _this2._loading = false;\n                _this2._subscribeToNativeEvents();\n                _this2._callOnPlaybackStatusUpdateForNewStatus(status);\n                resolve(status);\n              };\n              var loadError = function loadError(error) {\n                _this2._loading = false;\n                reject(error);\n              };\n              ExponentAV.loadForSound(nativeSource, fullInitialStatus).then(loadSuccess).catch(loadError);\n            }));\n          case 15:\n            throw new Error('The Sound is already loaded.');\n          case 16:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"unloadAsync\",\n    value: function unloadAsync() {\n      var key, status;\n      return _regeneratorRuntime.async(function unloadAsync$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            if (!this._loaded) {\n              _context4.next = 12;\n              break;\n            }\n            this._loaded = false;\n            key = this._key;\n            this._key = null;\n            _context4.next = 6;\n            return _regeneratorRuntime.awrap(ExponentAV.unloadForSound(key));\n          case 6:\n            status = _context4.sent;\n            this._callOnPlaybackStatusUpdateForNewStatus(status);\n            this._clearSubscriptions();\n            return _context4.abrupt(\"return\", status);\n          case 12:\n            return _context4.abrupt(\"return\", this.getStatusAsync());\n          case 13:\n          case \"end\":\n            return _context4.stop();\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"setStatusAsync\",\n    value: function setStatusAsync(status) {\n      var _this3 = this;\n      return _regeneratorRuntime.async(function setStatusAsync$(_context5) {\n        while (1) switch (_context5.prev = _context5.next) {\n          case 0:\n            assertStatusValuesInBounds(status);\n            return _context5.abrupt(\"return\", this._performOperationAndHandleStatusAsync(function () {\n              return ExponentAV.setStatusForSound(_this3._key, status);\n            }));\n          case 2:\n          case \"end\":\n            return _context5.stop();\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"replayAsync\",\n    value: function replayAsync() {\n      var _this4 = this;\n      var status,\n        _args6 = arguments;\n      return _regeneratorRuntime.async(function replayAsync$(_context6) {\n        while (1) switch (_context6.prev = _context6.next) {\n          case 0:\n            status = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : {};\n            if (!(status.positionMillis && status.positionMillis !== 0)) {\n              _context6.next = 3;\n              break;\n            }\n            throw new Error('Requested position after replay has to be 0.');\n          case 3:\n            return _context6.abrupt(\"return\", this._performOperationAndHandleStatusAsync(function () {\n              return ExponentAV.replaySound(_this4._key, _objectSpread(_objectSpread({}, status), {}, {\n                positionMillis: 0,\n                shouldPlay: true\n              }));\n            }));\n          case 4:\n          case \"end\":\n            return _context6.stop();\n        }\n      }, null, this, null, Promise);\n    }\n  }]);\n  return Sound;\n}();\n_class = Sound;\nSound.create = function _callee2(source) {\n  var initialStatus,\n    onPlaybackStatusUpdate,\n    downloadFirst,\n    _args7 = arguments;\n  return _regeneratorRuntime.async(function _callee2$(_context7) {\n    while (1) switch (_context7.prev = _context7.next) {\n      case 0:\n        initialStatus = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : {};\n        onPlaybackStatusUpdate = _args7.length > 2 && _args7[2] !== undefined ? _args7[2] : null;\n        downloadFirst = _args7.length > 3 && _args7[3] !== undefined ? _args7[3] : true;\n        console.warn(\"Sound.create is deprecated in favor of Sound.createAsync with the same API except for the new method name\");\n        return _context7.abrupt(\"return\", _class.createAsync(source, initialStatus, onPlaybackStatusUpdate, downloadFirst));\n      case 5:\n      case \"end\":\n        return _context7.stop();\n    }\n  }, null, null, null, Promise);\n};\nSound.createAsync = function _callee3(source) {\n  var initialStatus,\n    onPlaybackStatusUpdate,\n    downloadFirst,\n    sound,\n    status,\n    _args8 = arguments;\n  return _regeneratorRuntime.async(function _callee3$(_context8) {\n    while (1) switch (_context8.prev = _context8.next) {\n      case 0:\n        initialStatus = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : {};\n        onPlaybackStatusUpdate = _args8.length > 2 && _args8[2] !== undefined ? _args8[2] : null;\n        downloadFirst = _args8.length > 3 && _args8[3] !== undefined ? _args8[3] : true;\n        sound = new _class();\n        sound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);\n        _context8.next = 7;\n        return _regeneratorRuntime.awrap(sound.loadAsync(source, initialStatus, downloadFirst));\n      case 7:\n        status = _context8.sent;\n        return _context8.abrupt(\"return\", {\n          sound: sound,\n          status: status\n        });\n      case 9:\n      case \"end\":\n        return _context8.stop();\n    }\n  }, null, null, null, Promise);\n};\n_extends(Sound.prototype, PlaybackMixin);","map":{"version":3,"names":["EventEmitter","Platform","UnavailabilityError","PlaybackMixin","assertStatusValuesInBounds","getNativeSourceAndFullInitialStatusForLoadAsync","getUnloadedStatus","ExponentAV","throwIfAudioIsDisabled","Sound","_this","_classCallCheck","_loaded","_loading","_key","_lastStatusUpdate","_lastStatusUpdateTime","_subscriptions","_eventEmitter","_coalesceStatusUpdatesInMillis","_onPlaybackStatusUpdate","_onMetadataUpdate","_onAudioSampleReceived","_internalStatusUpdateCallback","_ref","key","status","_callOnPlaybackStatusUpdateForNewStatus","_internalMetadataUpdateCallback","_ref2","metadata","_internalErrorCallback","_ref3","error","_errorCallback","_clearSubscriptions","getStatusAsync","_callee","_regeneratorRuntime","async","_callee$","_context","prev","next","abrupt","_performOperationAndHandleStatusAsync","getStatusForSound","stop","Promise","_createClass","value","shouldDismissBasedOnCoalescing","JSON","stringify","Date","now","getTime","operation","_performOperationAndHandleStatusAsync$","_context2","awrap","sent","Error","_updateAudioSampleReceivedCallback","global","__EXAV_setOnAudioSampleReceivedCallback","OS","console","warn","_subscribeToNativeEvents","push","addListener","forEach","e","remove","setOnPlaybackStatusUpdate","onPlaybackStatusUpdate","setOnMetadataUpdate","onMetadataUpdate","setOnAudioSampleReceived","callback","loadAsync","source","_this2","initialStatus","downloadFirst","_await$getNativeSourc","nativeSource","fullInitialStatus","_args3","arguments","loadAsync$","_context3","length","undefined","resolve","reject","loadSuccess","result","_result","_slicedToArray","loadError","loadForSound","then","catch","unloadAsync","unloadAsync$","_context4","unloadForSound","setStatusAsync","_this3","setStatusAsync$","_context5","setStatusForSound","replayAsync","_this4","_args6","replayAsync$","_context6","positionMillis","replaySound","_objectSpread","shouldPlay","create","_callee2","_args7","_callee2$","_context7","createAsync","_callee3","sound","_args8","_callee3$","_context8","_extends","prototype"],"sources":["C:\\Users\\Pc02\\Desktop\\Biscoito\\biscoito-da-sorte\\node_modules\\expo-av\\src\\Audio\\Sound.ts"],"sourcesContent":["import { EventEmitter, Platform, UnavailabilityError } from 'expo-modules-core';\n\nimport {\n  Playback,\n  PlaybackMixin,\n  AVPlaybackSource,\n  AVMetadata,\n  AVPlaybackStatus,\n  AVPlaybackStatusToSet,\n  assertStatusValuesInBounds,\n  getNativeSourceAndFullInitialStatusForLoadAsync,\n  getUnloadedStatus,\n  AVPlaybackTolerance,\n} from '../AV';\nimport { PitchCorrectionQuality } from '../Audio';\nimport ExponentAV from '../ExponentAV';\nimport { throwIfAudioIsDisabled } from './AudioAvailability';\n\nexport type AudioChannel = {\n  /**\n   * All samples for this specific Audio Channel in PCM Buffer format (-1 to 1).\n   */\n  frames: number[];\n};\n\n/**\n * A single sample from an audio source. The sample contains all frames (PCM Buffer values) for each channel of the audio,\n * so if the audio is _stereo_ (interleaved), there will be two channels, one for left and one for right audio.\n */\nexport type AudioSample = {\n  /**\n   * Data from each Channel in PCM Buffer format.\n   */\n  channels: AudioChannel[];\n  /**\n   * The timestamp of this sample, relative to the Audio Track's timeline in seconds.\n   */\n  timestamp: number;\n};\n\ntype AudioInstance = number | HTMLMediaElement | null;\ntype AudioSampleCallback = ((sample: AudioSample) => void) | null;\n\ndeclare global {\n  interface Global {\n    __EXAV_setOnAudioSampleReceivedCallback:\n      | ((key: number, callback: AudioSampleCallback) => void)\n      | undefined;\n  }\n}\n\nexport class Sound implements Playback {\n  _loaded: boolean = false;\n  _loading: boolean = false;\n  _key: AudioInstance = null;\n  _lastStatusUpdate: string | null = null;\n  _lastStatusUpdateTime: Date | null = null;\n  _subscriptions: { remove: () => void }[] = [];\n  _eventEmitter: EventEmitter = new EventEmitter(ExponentAV);\n  _coalesceStatusUpdatesInMillis: number = 100;\n  _onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null;\n  _onMetadataUpdate: ((metadata: AVMetadata) => void) | null = null;\n  _onAudioSampleReceived: AudioSampleCallback = null;\n\n  /** @deprecated Use `Sound.createAsync()` instead */\n  static create = async (\n    source: AVPlaybackSource,\n    initialStatus: AVPlaybackStatusToSet = {},\n    onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null,\n    downloadFirst: boolean = true\n  ): Promise<{ sound: Sound; status: AVPlaybackStatus }> => {\n    console.warn(\n      `Sound.create is deprecated in favor of Sound.createAsync with the same API except for the new method name`\n    );\n    return Sound.createAsync(source, initialStatus, onPlaybackStatusUpdate, downloadFirst);\n  };\n\n  static createAsync = async (\n    source: AVPlaybackSource,\n    initialStatus: AVPlaybackStatusToSet = {},\n    onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null,\n    downloadFirst: boolean = true\n  ): Promise<{ sound: Sound; status: AVPlaybackStatus }> => {\n    const sound: Sound = new Sound();\n    sound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);\n    const status: AVPlaybackStatus = await sound.loadAsync(source, initialStatus, downloadFirst);\n    return { sound, status };\n  };\n\n  // Internal methods\n\n  _callOnPlaybackStatusUpdateForNewStatus(status: AVPlaybackStatus) {\n    const shouldDismissBasedOnCoalescing =\n      this._lastStatusUpdateTime &&\n      JSON.stringify(status) === this._lastStatusUpdate &&\n      Date.now() - this._lastStatusUpdateTime.getTime() < this._coalesceStatusUpdatesInMillis;\n\n    if (this._onPlaybackStatusUpdate != null && !shouldDismissBasedOnCoalescing) {\n      this._onPlaybackStatusUpdate(status);\n      this._lastStatusUpdateTime = new Date();\n      this._lastStatusUpdate = JSON.stringify(status);\n    }\n  }\n\n  async _performOperationAndHandleStatusAsync(\n    operation: () => Promise<AVPlaybackStatus>\n  ): Promise<AVPlaybackStatus> {\n    throwIfAudioIsDisabled();\n    if (this._loaded) {\n      const status = await operation();\n      this._callOnPlaybackStatusUpdateForNewStatus(status);\n      return status;\n    } else {\n      throw new Error('Cannot complete operation because sound is not loaded.');\n    }\n  }\n\n  private _updateAudioSampleReceivedCallback() {\n    if (global.__EXAV_setOnAudioSampleReceivedCallback == null) {\n      if (Platform.OS === 'ios' || Platform.OS === 'android') {\n        console.warn(\n          'expo-av: Failed to set up Audio Sample Buffer callback. ' +\n            \"Do you have 'Remote Debugging' enabled in your app's Developer Menu (https://docs.expo.dev/workflow/debugging)? \" +\n            'Audio Sample Buffer callbacks are not supported while using Remote Debugging, you will need to disable it to use them.'\n        );\n        return;\n      } else {\n        throw new UnavailabilityError('expo-av', 'setOnAudioSampleReceived');\n      }\n    }\n    if (this._key == null) {\n      throw new Error(\n        'Cannot set Audio Sample Buffer callback when the Sound instance has not been successfully loaded/initialized!'\n      );\n    }\n    if (typeof this._key !== 'number') {\n      throw new Error(\n        `Cannot set Audio Sample Buffer callback when Sound instance key is of type ${typeof this\n          ._key}! (expected: number)`\n      );\n    }\n\n    global.__EXAV_setOnAudioSampleReceivedCallback(this._key, this._onAudioSampleReceived);\n  }\n\n  _internalStatusUpdateCallback = ({\n    key,\n    status,\n  }: {\n    key: AudioInstance;\n    status: AVPlaybackStatus;\n  }) => {\n    if (this._key === key) {\n      this._callOnPlaybackStatusUpdateForNewStatus(status);\n    }\n  };\n\n  _internalMetadataUpdateCallback = ({\n    key,\n    metadata,\n  }: {\n    key: AudioInstance;\n    metadata: AVMetadata;\n  }) => {\n    if (this._key === key) {\n      this._onMetadataUpdate?.(metadata);\n    }\n  };\n\n  _internalErrorCallback = ({ key, error }: { key: AudioInstance; error: string }) => {\n    if (this._key === key) {\n      this._errorCallback(error);\n    }\n  };\n\n  // TODO: We can optimize by only using time observer on native if (this._onPlaybackStatusUpdate).\n  _subscribeToNativeEvents() {\n    if (this._loaded) {\n      this._subscriptions.push(\n        this._eventEmitter.addListener(\n          'didUpdatePlaybackStatus',\n          this._internalStatusUpdateCallback\n        ),\n        this._eventEmitter.addListener('didUpdateMetadata', this._internalMetadataUpdateCallback)\n      );\n\n      this._subscriptions.push(\n        this._eventEmitter.addListener('ExponentAV.onError', this._internalErrorCallback)\n      );\n    }\n  }\n\n  _clearSubscriptions() {\n    this._subscriptions.forEach((e) => e.remove());\n    this._subscriptions = [];\n  }\n\n  _errorCallback = (error: string) => {\n    this._clearSubscriptions();\n    this._loaded = false;\n    this._key = null;\n    this._callOnPlaybackStatusUpdateForNewStatus(getUnloadedStatus(error));\n  };\n\n  // ### Unified playback API ### (consistent with Video.js)\n  // All calls automatically call onPlaybackStatusUpdate as a side effect.\n\n  // Get status API\n\n  getStatusAsync = async (): Promise<AVPlaybackStatus> => {\n    if (this._loaded) {\n      return this._performOperationAndHandleStatusAsync(() =>\n        ExponentAV.getStatusForSound(this._key)\n      );\n    }\n    const status: AVPlaybackStatus = getUnloadedStatus();\n    this._callOnPlaybackStatusUpdateForNewStatus(status);\n    return status;\n  };\n\n  setOnPlaybackStatusUpdate(onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null) {\n    this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n    this.getStatusAsync();\n  }\n\n  setOnMetadataUpdate(onMetadataUpdate: (AVMetadata) => void) {\n    this._onMetadataUpdate = onMetadataUpdate;\n  }\n\n  /**\n   * Sets a function to be called during playback, receiving the audio sample as parameter.\n   * @param callback a function taking the {@link AudioSample} as parameter\n   */\n  setOnAudioSampleReceived(callback: AudioSampleCallback) {\n    this._onAudioSampleReceived = callback;\n    if (this._key != null) {\n      this._updateAudioSampleReceivedCallback();\n    }\n  }\n\n  // Loading / unloading API\n\n  async loadAsync(\n    source: AVPlaybackSource,\n    initialStatus: AVPlaybackStatusToSet = {},\n    downloadFirst: boolean = true\n  ): Promise<AVPlaybackStatus> {\n    throwIfAudioIsDisabled();\n    if (this._loading) {\n      throw new Error('The Sound is already loading.');\n    }\n    if (!this._loaded) {\n      this._loading = true;\n\n      const { nativeSource, fullInitialStatus } =\n        await getNativeSourceAndFullInitialStatusForLoadAsync(source, initialStatus, downloadFirst);\n\n      // This is a workaround, since using load with resolve / reject seems to not work.\n      return new Promise<AVPlaybackStatus>((resolve, reject) => {\n        const loadSuccess = (result: [AudioInstance, AVPlaybackStatus]) => {\n          const [key, status] = result;\n          this._key = key;\n          this._loaded = true;\n          this._loading = false;\n          this._subscribeToNativeEvents();\n          this._callOnPlaybackStatusUpdateForNewStatus(status);\n          resolve(status);\n        };\n\n        const loadError = (error: Error) => {\n          this._loading = false;\n          reject(error);\n        };\n\n        ExponentAV.loadForSound(nativeSource, fullInitialStatus).then(loadSuccess).catch(loadError);\n      });\n    } else {\n      throw new Error('The Sound is already loaded.');\n    }\n  }\n\n  async unloadAsync(): Promise<AVPlaybackStatus> {\n    if (this._loaded) {\n      this._loaded = false;\n      const key = this._key;\n      this._key = null;\n      const status = await ExponentAV.unloadForSound(key);\n      this._callOnPlaybackStatusUpdateForNewStatus(status);\n      this._clearSubscriptions();\n      return status;\n    } else {\n      return this.getStatusAsync(); // Automatically calls onPlaybackStatusUpdate.\n    }\n  }\n\n  // Set status API (only available while isLoaded = true)\n\n  async setStatusAsync(status: AVPlaybackStatusToSet): Promise<AVPlaybackStatus> {\n    assertStatusValuesInBounds(status);\n    return this._performOperationAndHandleStatusAsync(() =>\n      ExponentAV.setStatusForSound(this._key, status)\n    );\n  }\n\n  async replayAsync(status: AVPlaybackStatusToSet = {}): Promise<AVPlaybackStatus> {\n    if (status.positionMillis && status.positionMillis !== 0) {\n      throw new Error('Requested position after replay has to be 0.');\n    }\n\n    return this._performOperationAndHandleStatusAsync(() =>\n      ExponentAV.replaySound(this._key, {\n        ...status,\n        positionMillis: 0,\n        shouldPlay: true,\n      })\n    );\n  }\n\n  // Methods of the Playback interface that are set via PlaybackMixin\n  playAsync!: () => Promise<AVPlaybackStatus>;\n  playFromPositionAsync!: (\n    positionMillis: number,\n    tolerances?: AVPlaybackTolerance\n  ) => Promise<AVPlaybackStatus>;\n  pauseAsync!: () => Promise<AVPlaybackStatus>;\n  stopAsync!: () => Promise<AVPlaybackStatus>;\n  setPositionAsync!: (\n    positionMillis: number,\n    tolerances?: AVPlaybackTolerance\n  ) => Promise<AVPlaybackStatus>;\n  setRateAsync!: (\n    rate: number,\n    shouldCorrectPitch: boolean,\n    pitchCorrectionQuality?: PitchCorrectionQuality\n  ) => Promise<AVPlaybackStatus>;\n  setVolumeAsync!: (volume: number) => Promise<AVPlaybackStatus>;\n  setIsMutedAsync!: (isMuted: boolean) => Promise<AVPlaybackStatus>;\n  setIsLoopingAsync!: (isLooping: boolean) => Promise<AVPlaybackStatus>;\n  setProgressUpdateIntervalAsync!: (\n    progressUpdateIntervalMillis: number\n  ) => Promise<AVPlaybackStatus>;\n}\n\nObject.assign(Sound.prototype, PlaybackMixin);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}