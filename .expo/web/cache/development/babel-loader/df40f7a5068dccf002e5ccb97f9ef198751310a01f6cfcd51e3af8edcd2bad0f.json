{"ast":null,"code":"import ExponentAV from \"./ExponentAV\";\nexport var PitchCorrectionQuality;\n(function (PitchCorrectionQuality) {\n  PitchCorrectionQuality[PitchCorrectionQuality[\"Low\"] = ExponentAV && ExponentAV.Qualities && ExponentAV.Qualities.Low] = \"Low\";\n  PitchCorrectionQuality[PitchCorrectionQuality[\"Medium\"] = ExponentAV && ExponentAV.Qualities && ExponentAV.Qualities.Medium] = \"Medium\";\n  PitchCorrectionQuality[PitchCorrectionQuality[\"High\"] = ExponentAV && ExponentAV.Qualities && ExponentAV.Qualities.High] = \"High\";\n})(PitchCorrectionQuality || (PitchCorrectionQuality = {}));","map":{"version":3,"names":["ExponentAV","PitchCorrectionQuality","Qualities","Low","Medium","High"],"sources":["C:\\Users\\Pc02\\Desktop\\Biscoito\\biscoito-da-sorte\\node_modules\\expo-av\\src\\AV.types.ts"],"sourcesContent":["import { Asset } from 'expo-asset';\n\nimport ExponentAV from './ExponentAV';\n\nexport enum PitchCorrectionQuality {\n  Low = ExponentAV && ExponentAV.Qualities && ExponentAV.Qualities.Low,\n  Medium = ExponentAV && ExponentAV.Qualities && ExponentAV.Qualities.Medium,\n  High = ExponentAV && ExponentAV.Qualities && ExponentAV.Qualities.High,\n}\n\nexport type AVPlaybackSource = number | AVPlaybackSourceObject | Asset;\n\nexport type AVPlaybackSourceObject = {\n  uri: string;\n  overrideFileExtensionAndroid?: string;\n  headers?: { [fieldName: string]: string };\n};\n\nexport type AVPlaybackNativeSource = {\n  uri: string;\n  overridingExtension?: string | null;\n  headers?: { [fieldName: string]: string };\n};\n\nexport type AVMetadata = {\n  title?: string;\n};\n\nexport type AVPlaybackStatus = AVPlaybackStatusError | AVPlaybackStatusSuccess;\n\nexport type AVPlaybackStatusError = {\n  isLoaded: false;\n  androidImplementation?: string;\n  error?: string; // populated exactly once when an error forces the object to unload\n};\n\nexport type AVPlaybackStatusSuccess = {\n  isLoaded: true;\n  androidImplementation?: string;\n\n  uri: string;\n\n  progressUpdateIntervalMillis: number;\n  durationMillis?: number;\n  positionMillis: number;\n  playableDurationMillis?: number;\n  seekMillisToleranceBefore?: number;\n  seekMillisToleranceAfter?: number;\n\n  shouldPlay: boolean;\n  isPlaying: boolean;\n  isBuffering: boolean;\n\n  rate: number;\n  shouldCorrectPitch: boolean;\n  volume: number;\n  isMuted: boolean;\n  isLooping: boolean;\n\n  didJustFinish: boolean; // true exactly once when the track plays to finish\n};\n\nexport type AVPlaybackStatusToSet = {\n  androidImplementation?: string;\n  progressUpdateIntervalMillis?: number;\n  positionMillis?: number;\n  seekMillisToleranceBefore?: number;\n  seekMillisToleranceAfter?: number;\n  shouldPlay?: boolean;\n  rate?: number;\n  shouldCorrectPitch?: boolean;\n  volume?: number;\n  isMuted?: boolean;\n  isLooping?: boolean;\n  pitchCorrectionQuality?: PitchCorrectionQuality;\n};\n\nexport type AVPlaybackTolerance = { toleranceMillisBefore?: number; toleranceMillisAfter?: number };\n"],"mappings":"AAEA,OAAOA,UAAU;AAEjB,WAAYC,sBAIX;AAJD,WAAYA,sBAAsB;EAChCA,sBAAA,CAAAA,sBAAA,UAAMD,UAAU,IAAIA,UAAU,CAACE,SAAS,IAAIF,UAAU,CAACE,SAAS,CAACC,GAAG;EACpEF,sBAAA,CAAAA,sBAAA,aAASD,UAAU,IAAIA,UAAU,CAACE,SAAS,IAAIF,UAAU,CAACE,SAAS,CAACE,MAAM;EAC1EH,sBAAA,CAAAA,sBAAA,WAAOD,UAAU,IAAIA,UAAU,CAACE,SAAS,IAAIF,UAAU,CAACE,SAAS,CAACG,IAAI;AACxE,CAAC,EAJWJ,sBAAsB,KAAtBA,sBAAsB"},"metadata":{},"sourceType":"module","externalDependencies":[]}