{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar _class;\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { PermissionStatus, createPermissionHook, EventEmitter, Platform } from 'expo-modules-core';\nimport { _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS } from \"../AV\";\nimport ExponentAV from \"../ExponentAV\";\nimport { isAudioEnabled, throwIfAudioIsDisabled } from \"./AudioAvailability\";\nimport { RECORDING_OPTIONS_PRESET_LOW_QUALITY } from \"./RecordingConstants\";\nimport { Sound } from \"./Sound\";\nvar _recorderExists = false;\nvar eventEmitter = Platform.OS === 'android' ? new EventEmitter(ExponentAV) : null;\nexport function getPermissionsAsync() {\n  return _regeneratorRuntime.async(function getPermissionsAsync$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        return _context.abrupt(\"return\", ExponentAV.getPermissionsAsync());\n      case 1:\n      case \"end\":\n        return _context.stop();\n    }\n  }, null, null, null, Promise);\n}\nexport function requestPermissionsAsync() {\n  return _regeneratorRuntime.async(function requestPermissionsAsync$(_context2) {\n    while (1) switch (_context2.prev = _context2.next) {\n      case 0:\n        return _context2.abrupt(\"return\", ExponentAV.requestPermissionsAsync());\n      case 1:\n      case \"end\":\n        return _context2.stop();\n    }\n  }, null, null, null, Promise);\n}\nexport var usePermissions = createPermissionHook({\n  getMethod: getPermissionsAsync,\n  requestMethod: requestPermissionsAsync\n});\nexport var Recording = function () {\n  function Recording() {\n    var _this = this;\n    _classCallCheck(this, Recording);\n    this._subscription = null;\n    this._canRecord = false;\n    this._isDoneRecording = false;\n    this._finalDurationMillis = 0;\n    this._uri = null;\n    this._onRecordingStatusUpdate = null;\n    this._progressUpdateTimeoutVariable = null;\n    this._progressUpdateIntervalMillis = _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS;\n    this._options = null;\n    this._cleanupForUnloadedRecorder = function _callee(finalStatus) {\n      var _finalStatus$duration;\n      return _regeneratorRuntime.async(function _callee$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            _this._canRecord = false;\n            _this._isDoneRecording = true;\n            _this._finalDurationMillis = (_finalStatus$duration = finalStatus == null ? void 0 : finalStatus.durationMillis) != null ? _finalStatus$duration : 0;\n            _recorderExists = false;\n            if (_this._subscription) {\n              _this._subscription.remove();\n              _this._subscription = null;\n            }\n            _this._disablePolling();\n            _context3.next = 8;\n            return _regeneratorRuntime.awrap(_this.getStatusAsync());\n          case 8:\n            return _context3.abrupt(\"return\", _context3.sent);\n          case 9:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, null, null, null, Promise);\n    };\n    this._pollingLoop = function _callee2() {\n      return _regeneratorRuntime.async(function _callee2$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            if (!(isAudioEnabled() && _this._canRecord && _this._onRecordingStatusUpdate != null)) {\n              _context4.next = 10;\n              break;\n            }\n            _this._progressUpdateTimeoutVariable = setTimeout(_this._pollingLoop, _this._progressUpdateIntervalMillis);\n            _context4.prev = 2;\n            _context4.next = 5;\n            return _regeneratorRuntime.awrap(_this.getStatusAsync());\n          case 5:\n            _context4.next = 10;\n            break;\n          case 7:\n            _context4.prev = 7;\n            _context4.t0 = _context4[\"catch\"](2);\n            _this._disablePolling();\n          case 10:\n          case \"end\":\n            return _context4.stop();\n        }\n      }, null, null, [[2, 7]], Promise);\n    };\n    this.getStatusAsync = function _callee3() {\n      var status;\n      return _regeneratorRuntime.async(function _callee3$(_context5) {\n        while (1) switch (_context5.prev = _context5.next) {\n          case 0:\n            if (!_this._canRecord) {\n              _context5.next = 2;\n              break;\n            }\n            return _context5.abrupt(\"return\", _this._performOperationAndHandleStatusAsync(function () {\n              return ExponentAV.getAudioRecordingStatus();\n            }));\n          case 2:\n            status = {\n              canRecord: false,\n              isRecording: false,\n              isDoneRecording: _this._isDoneRecording,\n              durationMillis: _this._finalDurationMillis\n            };\n            _this._callOnRecordingStatusUpdateForNewStatus(status);\n            return _context5.abrupt(\"return\", status);\n          case 5:\n          case \"end\":\n            return _context5.stop();\n        }\n      }, null, null, null, Promise);\n    };\n  }\n  _createClass(Recording, [{\n    key: \"_disablePolling\",\n    value: function _disablePolling() {\n      if (this._progressUpdateTimeoutVariable != null) {\n        clearTimeout(this._progressUpdateTimeoutVariable);\n        this._progressUpdateTimeoutVariable = null;\n      }\n    }\n  }, {\n    key: \"_enablePollingIfNecessaryAndPossible\",\n    value: function _enablePollingIfNecessaryAndPossible() {\n      if (isAudioEnabled() && this._canRecord && this._onRecordingStatusUpdate != null) {\n        this._disablePolling();\n        this._pollingLoop();\n      }\n    }\n  }, {\n    key: \"_callOnRecordingStatusUpdateForNewStatus\",\n    value: function _callOnRecordingStatusUpdateForNewStatus(status) {\n      if (this._onRecordingStatusUpdate != null) {\n        this._onRecordingStatusUpdate(status);\n      }\n    }\n  }, {\n    key: \"_performOperationAndHandleStatusAsync\",\n    value: function _performOperationAndHandleStatusAsync(operation) {\n      var status;\n      return _regeneratorRuntime.async(function _performOperationAndHandleStatusAsync$(_context6) {\n        while (1) switch (_context6.prev = _context6.next) {\n          case 0:\n            throwIfAudioIsDisabled();\n            if (!this._canRecord) {\n              _context6.next = 9;\n              break;\n            }\n            _context6.next = 4;\n            return _regeneratorRuntime.awrap(operation());\n          case 4:\n            status = _context6.sent;\n            this._callOnRecordingStatusUpdateForNewStatus(status);\n            return _context6.abrupt(\"return\", status);\n          case 9:\n            throw new Error('Cannot complete operation because this recorder is not ready to record.');\n          case 10:\n          case \"end\":\n            return _context6.stop();\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"setOnRecordingStatusUpdate\",\n    value: function setOnRecordingStatusUpdate(onRecordingStatusUpdate) {\n      this._onRecordingStatusUpdate = onRecordingStatusUpdate;\n      if (onRecordingStatusUpdate == null) {\n        this._disablePolling();\n      } else {\n        this._enablePollingIfNecessaryAndPossible();\n      }\n      this.getStatusAsync();\n    }\n  }, {\n    key: \"setProgressUpdateInterval\",\n    value: function setProgressUpdateInterval(progressUpdateIntervalMillis) {\n      this._progressUpdateIntervalMillis = progressUpdateIntervalMillis;\n      this.getStatusAsync();\n    }\n  }, {\n    key: \"prepareToRecordAsync\",\n    value: function prepareToRecordAsync() {\n      var options,\n        extensionRegex,\n        _await$ExponentAV$pre,\n        uri,\n        status,\n        currentStatus,\n        _args7 = arguments;\n      return _regeneratorRuntime.async(function prepareToRecordAsync$(_context7) {\n        while (1) switch (_context7.prev = _context7.next) {\n          case 0:\n            options = _args7.length > 0 && _args7[0] !== undefined ? _args7[0] : RECORDING_OPTIONS_PRESET_LOW_QUALITY;\n            throwIfAudioIsDisabled();\n            if (!_recorderExists) {\n              _context7.next = 4;\n              break;\n            }\n            throw new Error('Only one Recording object can be prepared at a given time.');\n          case 4:\n            if (!this._isDoneRecording) {\n              _context7.next = 6;\n              break;\n            }\n            throw new Error('This Recording object is done recording; you must make a new one.');\n          case 6:\n            if (!(!options || !options.android || !options.ios)) {\n              _context7.next = 8;\n              break;\n            }\n            throw new Error('You must provide recording options for android and ios in order to prepare to record.');\n          case 8:\n            extensionRegex = /^\\.\\w+$/;\n            if (!(!options.android.extension || !options.ios.extension || !extensionRegex.test(options.android.extension) || !extensionRegex.test(options.ios.extension))) {\n              _context7.next = 11;\n              break;\n            }\n            throw new Error(\"Your file extensions must match \" + extensionRegex.toString() + \".\");\n          case 11:\n            if (this._canRecord) {\n              _context7.next = 28;\n              break;\n            }\n            if (eventEmitter) {\n              this._subscription = eventEmitter.addListener('Expo.Recording.recorderUnloaded', this._cleanupForUnloadedRecorder);\n            }\n            _context7.next = 15;\n            return _regeneratorRuntime.awrap(ExponentAV.prepareAudioRecorder(options));\n          case 15:\n            _await$ExponentAV$pre = _context7.sent;\n            uri = _await$ExponentAV$pre.uri;\n            status = _await$ExponentAV$pre.status;\n            _recorderExists = true;\n            this._uri = uri;\n            this._options = options;\n            this._canRecord = true;\n            currentStatus = _objectSpread(_objectSpread({}, status), {}, {\n              canRecord: true\n            });\n            this._callOnRecordingStatusUpdateForNewStatus(currentStatus);\n            this._enablePollingIfNecessaryAndPossible();\n            return _context7.abrupt(\"return\", currentStatus);\n          case 28:\n            throw new Error('This Recording object is already prepared to record.');\n          case 29:\n          case \"end\":\n            return _context7.stop();\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"getAvailableInputs\",\n    value: function getAvailableInputs() {\n      return _regeneratorRuntime.async(function getAvailableInputs$(_context8) {\n        while (1) switch (_context8.prev = _context8.next) {\n          case 0:\n            return _context8.abrupt(\"return\", ExponentAV.getAvailableInputs());\n          case 1:\n          case \"end\":\n            return _context8.stop();\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"getCurrentInput\",\n    value: function getCurrentInput() {\n      return _regeneratorRuntime.async(function getCurrentInput$(_context9) {\n        while (1) switch (_context9.prev = _context9.next) {\n          case 0:\n            return _context9.abrupt(\"return\", ExponentAV.getCurrentInput());\n          case 1:\n          case \"end\":\n            return _context9.stop();\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"setInput\",\n    value: function setInput(inputUid) {\n      return _regeneratorRuntime.async(function setInput$(_context10) {\n        while (1) switch (_context10.prev = _context10.next) {\n          case 0:\n            return _context10.abrupt(\"return\", ExponentAV.setInput(inputUid));\n          case 1:\n          case \"end\":\n            return _context10.stop();\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"startAsync\",\n    value: function startAsync() {\n      return _regeneratorRuntime.async(function startAsync$(_context11) {\n        while (1) switch (_context11.prev = _context11.next) {\n          case 0:\n            return _context11.abrupt(\"return\", this._performOperationAndHandleStatusAsync(function () {\n              return ExponentAV.startAudioRecording();\n            }));\n          case 1:\n          case \"end\":\n            return _context11.stop();\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"pauseAsync\",\n    value: function pauseAsync() {\n      return _regeneratorRuntime.async(function pauseAsync$(_context12) {\n        while (1) switch (_context12.prev = _context12.next) {\n          case 0:\n            return _context12.abrupt(\"return\", this._performOperationAndHandleStatusAsync(function () {\n              return ExponentAV.pauseAudioRecording();\n            }));\n          case 1:\n          case \"end\":\n            return _context12.stop();\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"stopAndUnloadAsync\",\n    value: function stopAndUnloadAsync() {\n      var _stopResult;\n      var stopResult, stopError, status;\n      return _regeneratorRuntime.async(function stopAndUnloadAsync$(_context13) {\n        while (1) switch (_context13.prev = _context13.next) {\n          case 0:\n            if (this._canRecord) {\n              _context13.next = 6;\n              break;\n            }\n            if (!this._isDoneRecording) {\n              _context13.next = 5;\n              break;\n            }\n            throw new Error('Cannot unload a Recording that has already been unloaded.');\n          case 5:\n            throw new Error('Cannot unload a Recording that has not been prepared.');\n          case 6:\n            _context13.prev = 6;\n            _context13.next = 9;\n            return _regeneratorRuntime.awrap(ExponentAV.stopAudioRecording());\n          case 9:\n            stopResult = _context13.sent;\n            _context13.next = 15;\n            break;\n          case 12:\n            _context13.prev = 12;\n            _context13.t0 = _context13[\"catch\"](6);\n            stopError = _context13.t0;\n          case 15:\n            if (Platform.OS === 'web' && ((_stopResult = stopResult) == null ? void 0 : _stopResult.uri) !== undefined) {\n              this._uri = stopResult.uri;\n            }\n            _context13.next = 18;\n            return _regeneratorRuntime.awrap(ExponentAV.unloadAudioRecorder());\n          case 18:\n            _context13.next = 20;\n            return _regeneratorRuntime.awrap(this._cleanupForUnloadedRecorder(stopResult));\n          case 20:\n            status = _context13.sent;\n            return _context13.abrupt(\"return\", stopError ? Promise.reject(stopError) : status);\n          case 22:\n          case \"end\":\n            return _context13.stop();\n        }\n      }, null, this, [[6, 12]], Promise);\n    }\n  }, {\n    key: \"getURI\",\n    value: function getURI() {\n      return this._uri;\n    }\n  }, {\n    key: \"createNewLoadedSound\",\n    value: function createNewLoadedSound() {\n      var initialStatus,\n        onPlaybackStatusUpdate,\n        _args14 = arguments;\n      return _regeneratorRuntime.async(function createNewLoadedSound$(_context14) {\n        while (1) switch (_context14.prev = _context14.next) {\n          case 0:\n            initialStatus = _args14.length > 0 && _args14[0] !== undefined ? _args14[0] : {};\n            onPlaybackStatusUpdate = _args14.length > 1 && _args14[1] !== undefined ? _args14[1] : null;\n            console.warn(\"createNewLoadedSound is deprecated in favor of createNewLoadedSoundAsync, which has the same API aside from the method name\");\n            return _context14.abrupt(\"return\", this.createNewLoadedSoundAsync(initialStatus, onPlaybackStatusUpdate));\n          case 4:\n          case \"end\":\n            return _context14.stop();\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"createNewLoadedSoundAsync\",\n    value: function createNewLoadedSoundAsync() {\n      var initialStatus,\n        onPlaybackStatusUpdate,\n        _args15 = arguments;\n      return _regeneratorRuntime.async(function createNewLoadedSoundAsync$(_context15) {\n        while (1) switch (_context15.prev = _context15.next) {\n          case 0:\n            initialStatus = _args15.length > 0 && _args15[0] !== undefined ? _args15[0] : {};\n            onPlaybackStatusUpdate = _args15.length > 1 && _args15[1] !== undefined ? _args15[1] : null;\n            if (!(this._uri == null || !this._isDoneRecording)) {\n              _context15.next = 4;\n              break;\n            }\n            throw new Error('Cannot create sound when the Recording has not finished!');\n          case 4:\n            return _context15.abrupt(\"return\", Sound.createAsync({\n              uri: this._uri\n            }, initialStatus, onPlaybackStatusUpdate, false));\n          case 5:\n          case \"end\":\n            return _context15.stop();\n        }\n      }, null, this, null, Promise);\n    }\n  }]);\n  return Recording;\n}();\n_class = Recording;\nRecording.createAsync = function _callee4() {\n  var options,\n    onRecordingStatusUpdate,\n    progressUpdateIntervalMillis,\n    recording,\n    status,\n    _args16 = arguments;\n  return _regeneratorRuntime.async(function _callee4$(_context16) {\n    while (1) switch (_context16.prev = _context16.next) {\n      case 0:\n        options = _args16.length > 0 && _args16[0] !== undefined ? _args16[0] : RECORDING_OPTIONS_PRESET_LOW_QUALITY;\n        onRecordingStatusUpdate = _args16.length > 1 && _args16[1] !== undefined ? _args16[1] : null;\n        progressUpdateIntervalMillis = _args16.length > 2 && _args16[2] !== undefined ? _args16[2] : null;\n        recording = new _class();\n        if (progressUpdateIntervalMillis) {\n          recording._progressUpdateIntervalMillis = progressUpdateIntervalMillis;\n        }\n        recording.setOnRecordingStatusUpdate(onRecordingStatusUpdate);\n        _context16.next = 8;\n        return _regeneratorRuntime.awrap(recording.prepareToRecordAsync(_objectSpread(_objectSpread({}, options), {}, {\n          keepAudioActiveHint: true\n        })));\n      case 8:\n        _context16.prev = 8;\n        _context16.next = 11;\n        return _regeneratorRuntime.awrap(recording.startAsync());\n      case 11:\n        status = _context16.sent;\n        return _context16.abrupt(\"return\", {\n          recording: recording,\n          status: status\n        });\n      case 15:\n        _context16.prev = 15;\n        _context16.t0 = _context16[\"catch\"](8);\n        recording.stopAndUnloadAsync();\n        throw _context16.t0;\n      case 19:\n      case \"end\":\n        return _context16.stop();\n    }\n  }, null, null, [[8, 15]], Promise);\n};\nexport * from \"./RecordingConstants\";\nexport { PermissionStatus };","map":{"version":3,"names":["PermissionStatus","createPermissionHook","EventEmitter","Platform","_DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS","ExponentAV","isAudioEnabled","throwIfAudioIsDisabled","RECORDING_OPTIONS_PRESET_LOW_QUALITY","Sound","_recorderExists","eventEmitter","OS","getPermissionsAsync","_regeneratorRuntime","async","getPermissionsAsync$","_context","prev","next","abrupt","stop","Promise","requestPermissionsAsync","requestPermissionsAsync$","_context2","usePermissions","getMethod","requestMethod","Recording","_this","_classCallCheck","_subscription","_canRecord","_isDoneRecording","_finalDurationMillis","_uri","_onRecordingStatusUpdate","_progressUpdateTimeoutVariable","_progressUpdateIntervalMillis","_options","_cleanupForUnloadedRecorder","_callee","finalStatus","_finalStatus$duration","_callee$","_context3","durationMillis","remove","_disablePolling","awrap","getStatusAsync","sent","_pollingLoop","_callee2","_callee2$","_context4","setTimeout","t0","_callee3","status","_callee3$","_context5","_performOperationAndHandleStatusAsync","getAudioRecordingStatus","canRecord","isRecording","isDoneRecording","_callOnRecordingStatusUpdateForNewStatus","_createClass","key","value","clearTimeout","_enablePollingIfNecessaryAndPossible","operation","_performOperationAndHandleStatusAsync$","_context6","Error","setOnRecordingStatusUpdate","onRecordingStatusUpdate","setProgressUpdateInterval","progressUpdateIntervalMillis","prepareToRecordAsync","options","extensionRegex","_await$ExponentAV$pre","uri","currentStatus","_args7","arguments","prepareToRecordAsync$","_context7","length","undefined","android","ios","extension","test","toString","addListener","prepareAudioRecorder","_objectSpread","getAvailableInputs","getAvailableInputs$","_context8","getCurrentInput","getCurrentInput$","_context9","setInput","inputUid","setInput$","_context10","startAsync","startAsync$","_context11","startAudioRecording","pauseAsync","pauseAsync$","_context12","pauseAudioRecording","stopAndUnloadAsync","_stopResult","stopResult","stopError","stopAndUnloadAsync$","_context13","stopAudioRecording","unloadAudioRecorder","reject","getURI","createNewLoadedSound","initialStatus","onPlaybackStatusUpdate","_args14","createNewLoadedSound$","_context14","console","warn","createNewLoadedSoundAsync","_args15","createNewLoadedSoundAsync$","_context15","createAsync","_callee4","recording","_args16","_callee4$","_context16","keepAudioActiveHint"],"sources":["C:\\Users\\Pc02\\Desktop\\Biscoito\\biscoito-da-sorte\\node_modules\\expo-av\\src\\Audio\\Recording.ts"],"sourcesContent":["import {\n  PermissionResponse,\n  PermissionStatus,\n  PermissionHookOptions,\n  createPermissionHook,\n  EventEmitter,\n  Subscription,\n  Platform,\n} from 'expo-modules-core';\n\nimport {\n  _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS,\n  AVPlaybackStatus,\n  AVPlaybackStatusToSet,\n} from '../AV';\nimport ExponentAV from '../ExponentAV';\nimport { isAudioEnabled, throwIfAudioIsDisabled } from './AudioAvailability';\nimport { RecordingInput, RecordingOptions, RecordingStatus } from './Recording.types';\nimport { RECORDING_OPTIONS_PRESET_LOW_QUALITY } from './RecordingConstants';\nimport { Sound } from './Sound';\n\nlet _recorderExists: boolean = false;\nconst eventEmitter = Platform.OS === 'android' ? new EventEmitter(ExponentAV) : null;\n\nexport async function getPermissionsAsync(): Promise<PermissionResponse> {\n  return ExponentAV.getPermissionsAsync();\n}\n\nexport async function requestPermissionsAsync(): Promise<PermissionResponse> {\n  return ExponentAV.requestPermissionsAsync();\n}\n\n/**\n * Check or request permissions to record audio.\n * This uses both `requestPermissionAsync` and `getPermissionsAsync` to interact with the permissions.\n *\n * @example\n * ```ts\n * const [status, requestPermission] = Audio.usePermissions();\n * ```\n */\nexport const usePermissions = createPermissionHook({\n  getMethod: getPermissionsAsync,\n  requestMethod: requestPermissionsAsync,\n});\n\nexport class Recording {\n  _subscription: Subscription | null = null;\n  _canRecord: boolean = false;\n  _isDoneRecording: boolean = false;\n  _finalDurationMillis: number = 0;\n  _uri: string | null = null;\n  _onRecordingStatusUpdate: ((status: RecordingStatus) => void) | null = null;\n  _progressUpdateTimeoutVariable: number | null = null;\n  _progressUpdateIntervalMillis: number = _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS;\n  _options: RecordingOptions | null = null;\n\n  // Internal methods\n\n  _cleanupForUnloadedRecorder = async (finalStatus?: RecordingStatus) => {\n    this._canRecord = false;\n    this._isDoneRecording = true;\n    this._finalDurationMillis = finalStatus?.durationMillis ?? 0;\n    _recorderExists = false;\n    if (this._subscription) {\n      this._subscription.remove();\n      this._subscription = null;\n    }\n    this._disablePolling();\n    return await this.getStatusAsync(); // Automatically calls onRecordingStatusUpdate for the final state.\n  };\n\n  _pollingLoop = async () => {\n    if (isAudioEnabled() && this._canRecord && this._onRecordingStatusUpdate != null) {\n      this._progressUpdateTimeoutVariable = setTimeout(\n        this._pollingLoop,\n        this._progressUpdateIntervalMillis\n      ) as any;\n      try {\n        await this.getStatusAsync();\n      } catch {\n        this._disablePolling();\n      }\n    }\n  };\n\n  _disablePolling() {\n    if (this._progressUpdateTimeoutVariable != null) {\n      clearTimeout(this._progressUpdateTimeoutVariable);\n      this._progressUpdateTimeoutVariable = null;\n    }\n  }\n\n  _enablePollingIfNecessaryAndPossible() {\n    if (isAudioEnabled() && this._canRecord && this._onRecordingStatusUpdate != null) {\n      this._disablePolling();\n      this._pollingLoop();\n    }\n  }\n\n  _callOnRecordingStatusUpdateForNewStatus(status: RecordingStatus) {\n    if (this._onRecordingStatusUpdate != null) {\n      this._onRecordingStatusUpdate(status);\n    }\n  }\n\n  async _performOperationAndHandleStatusAsync(\n    operation: () => Promise<RecordingStatus>\n  ): Promise<RecordingStatus> {\n    throwIfAudioIsDisabled();\n    if (this._canRecord) {\n      const status = await operation();\n      this._callOnRecordingStatusUpdateForNewStatus(status);\n      return status;\n    } else {\n      throw new Error('Cannot complete operation because this recorder is not ready to record.');\n    }\n  }\n\n  // Note that all calls automatically call onRecordingStatusUpdate as a side effect.\n\n  static createAsync = async (\n    options: RecordingOptions = RECORDING_OPTIONS_PRESET_LOW_QUALITY,\n    onRecordingStatusUpdate: ((status: RecordingStatus) => void) | null = null,\n    progressUpdateIntervalMillis: number | null = null\n  ): Promise<{ recording: Recording; status: RecordingStatus }> => {\n    const recording: Recording = new Recording();\n    if (progressUpdateIntervalMillis) {\n      recording._progressUpdateIntervalMillis = progressUpdateIntervalMillis;\n    }\n    recording.setOnRecordingStatusUpdate(onRecordingStatusUpdate);\n    await recording.prepareToRecordAsync({\n      ...options,\n      keepAudioActiveHint: true,\n    });\n    try {\n      const status = await recording.startAsync();\n      return { recording, status };\n    } catch (err) {\n      recording.stopAndUnloadAsync();\n      throw err;\n    }\n  };\n\n  // Get status API\n\n  getStatusAsync = async (): Promise<RecordingStatus> => {\n    // Automatically calls onRecordingStatusUpdate.\n    if (this._canRecord) {\n      return this._performOperationAndHandleStatusAsync(() => ExponentAV.getAudioRecordingStatus());\n    }\n    const status = {\n      canRecord: false,\n      isRecording: false,\n      isDoneRecording: this._isDoneRecording,\n      durationMillis: this._finalDurationMillis,\n    };\n    this._callOnRecordingStatusUpdateForNewStatus(status);\n    return status;\n  };\n\n  setOnRecordingStatusUpdate(onRecordingStatusUpdate: ((status: RecordingStatus) => void) | null) {\n    this._onRecordingStatusUpdate = onRecordingStatusUpdate;\n    if (onRecordingStatusUpdate == null) {\n      this._disablePolling();\n    } else {\n      this._enablePollingIfNecessaryAndPossible();\n    }\n    this.getStatusAsync();\n  }\n\n  setProgressUpdateInterval(progressUpdateIntervalMillis: number) {\n    this._progressUpdateIntervalMillis = progressUpdateIntervalMillis;\n    this.getStatusAsync();\n  }\n\n  // Record API\n\n  async prepareToRecordAsync(\n    options: RecordingOptions = RECORDING_OPTIONS_PRESET_LOW_QUALITY\n  ): Promise<RecordingStatus> {\n    throwIfAudioIsDisabled();\n\n    if (_recorderExists) {\n      throw new Error('Only one Recording object can be prepared at a given time.');\n    }\n\n    if (this._isDoneRecording) {\n      throw new Error('This Recording object is done recording; you must make a new one.');\n    }\n\n    if (!options || !options.android || !options.ios) {\n      throw new Error(\n        'You must provide recording options for android and ios in order to prepare to record.'\n      );\n    }\n\n    const extensionRegex = /^\\.\\w+$/;\n    if (\n      !options.android.extension ||\n      !options.ios.extension ||\n      !extensionRegex.test(options.android.extension) ||\n      !extensionRegex.test(options.ios.extension)\n    ) {\n      throw new Error(`Your file extensions must match ${extensionRegex.toString()}.`);\n    }\n\n    if (!this._canRecord) {\n      if (eventEmitter) {\n        this._subscription = eventEmitter.addListener(\n          'Expo.Recording.recorderUnloaded',\n          this._cleanupForUnloadedRecorder\n        );\n      }\n\n      const {\n        uri,\n        status,\n      }: {\n        uri: string | null;\n        // status is of type RecordingStatus, but without the canRecord field populated\n        status: Pick<RecordingStatus, Exclude<keyof RecordingStatus, 'canRecord'>>;\n      } = await ExponentAV.prepareAudioRecorder(options);\n      _recorderExists = true;\n      this._uri = uri;\n      this._options = options;\n      this._canRecord = true;\n\n      const currentStatus = { ...status, canRecord: true };\n      this._callOnRecordingStatusUpdateForNewStatus(currentStatus);\n      this._enablePollingIfNecessaryAndPossible();\n      return currentStatus;\n    } else {\n      throw new Error('This Recording object is already prepared to record.');\n    }\n  }\n\n  async getAvailableInputs(): Promise<RecordingInput[]> {\n    return ExponentAV.getAvailableInputs();\n  }\n\n  async getCurrentInput(): Promise<RecordingInput> {\n    return ExponentAV.getCurrentInput();\n  }\n\n  async setInput(inputUid: string): Promise<void> {\n    return ExponentAV.setInput(inputUid);\n  }\n\n  async startAsync(): Promise<RecordingStatus> {\n    return this._performOperationAndHandleStatusAsync(() => ExponentAV.startAudioRecording());\n  }\n\n  async pauseAsync(): Promise<RecordingStatus> {\n    return this._performOperationAndHandleStatusAsync(() => ExponentAV.pauseAudioRecording());\n  }\n\n  async stopAndUnloadAsync(): Promise<RecordingStatus> {\n    if (!this._canRecord) {\n      if (this._isDoneRecording) {\n        throw new Error('Cannot unload a Recording that has already been unloaded.');\n      } else {\n        throw new Error('Cannot unload a Recording that has not been prepared.');\n      }\n    }\n    // We perform a separate native API call so that the state of the Recording can be updated with\n    // the final duration of the recording. (We cast stopStatus as Object to appease Flow)\n    let stopResult: RecordingStatus | undefined;\n    let stopError: Error | undefined;\n    try {\n      stopResult = await ExponentAV.stopAudioRecording();\n    } catch (err) {\n      stopError = err;\n    }\n\n    // Web has to return the URI at the end of recording, so needs a little destructuring\n    if (Platform.OS === 'web' && stopResult?.uri !== undefined) {\n      this._uri = stopResult.uri;\n    }\n\n    // Clean-up and return status\n    await ExponentAV.unloadAudioRecorder();\n    const status = await this._cleanupForUnloadedRecorder(stopResult);\n    return stopError ? Promise.reject(stopError) : status;\n  }\n\n  // Read API\n\n  getURI(): string | null {\n    return this._uri;\n  }\n\n  /** @deprecated Use `createNewLoadedSoundAsync()` instead */\n  async createNewLoadedSound(\n    initialStatus: AVPlaybackStatusToSet = {},\n    onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null\n  ): Promise<{ sound: Sound; status: AVPlaybackStatus }> {\n    console.warn(\n      `createNewLoadedSound is deprecated in favor of createNewLoadedSoundAsync, which has the same API aside from the method name`\n    );\n    return this.createNewLoadedSoundAsync(initialStatus, onPlaybackStatusUpdate);\n  }\n\n  async createNewLoadedSoundAsync(\n    initialStatus: AVPlaybackStatusToSet = {},\n    onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null\n  ): Promise<{ sound: Sound; status: AVPlaybackStatus }> {\n    if (this._uri == null || !this._isDoneRecording) {\n      throw new Error('Cannot create sound when the Recording has not finished!');\n    }\n    return Sound.createAsync(\n      // $FlowFixMe: Flow can't distinguish between this literal and Asset\n      { uri: this._uri },\n      initialStatus,\n      onPlaybackStatusUpdate,\n      false\n    );\n  }\n}\n\nexport * from './RecordingConstants';\n\nexport {\n  PermissionResponse,\n  PermissionStatus,\n  PermissionHookOptions,\n  RecordingOptions,\n  RecordingStatus,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}