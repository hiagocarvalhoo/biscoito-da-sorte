{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { InterruptionModeAndroid, InterruptionModeIOS } from \"./Audio.types\";\nimport ExponentAV from \"./ExponentAV\";\nexport * from \"./Audio/Recording\";\nexport * from \"./Audio/Sound\";\nexport { setIsEnabledAsync } from \"./Audio/AudioAvailability\";\nexport { PitchCorrectionQuality } from \"./AV\";\nvar _populateMissingKeys = function _populateMissingKeys(userAudioMode, defaultAudioMode) {\n  for (var key in defaultAudioMode) {\n    if (!userAudioMode.hasOwnProperty(key)) {\n      userAudioMode[key] = defaultAudioMode[key];\n    }\n  }\n  return userAudioMode;\n};\nvar defaultMode = {\n  allowsRecordingIOS: false,\n  interruptionModeIOS: InterruptionModeIOS.MixWithOthers,\n  playsInSilentModeIOS: false,\n  staysActiveInBackground: false,\n  interruptionModeAndroid: InterruptionModeAndroid.DuckOthers,\n  shouldDuckAndroid: true,\n  playThroughEarpieceAndroid: false\n};\nvar currentAudioMode = null;\nfunction getCurrentAudioMode() {\n  if (!currentAudioMode) {\n    return defaultMode;\n  }\n  return currentAudioMode;\n}\nexport function setAudioModeAsync(partialMode) {\n  var mode;\n  return _regeneratorRuntime.async(function setAudioModeAsync$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        mode = _populateMissingKeys(partialMode, getCurrentAudioMode());\n        if (InterruptionModeIOS[mode.interruptionModeIOS]) {\n          _context.next = 3;\n          break;\n        }\n        throw new Error(\"\\\"interruptionModeIOS\\\" was set to an invalid value.\");\n      case 3:\n        if (InterruptionModeAndroid[mode.interruptionModeAndroid]) {\n          _context.next = 5;\n          break;\n        }\n        throw new Error(\"\\\"interruptionModeAndroid\\\" was set to an invalid value.\");\n      case 5:\n        if (!(typeof mode.allowsRecordingIOS !== 'boolean' || typeof mode.playsInSilentModeIOS !== 'boolean' || typeof mode.staysActiveInBackground !== 'boolean' || typeof mode.shouldDuckAndroid !== 'boolean' || typeof mode.playThroughEarpieceAndroid !== 'boolean')) {\n          _context.next = 7;\n          break;\n        }\n        throw new Error('\"allowsRecordingIOS\", \"playsInSilentModeIOS\", \"playThroughEarpieceAndroid\", \"staysActiveInBackground\" and \"shouldDuckAndroid\" must be booleans.');\n      case 7:\n        currentAudioMode = mode;\n        _context.next = 10;\n        return _regeneratorRuntime.awrap(ExponentAV.setAudioMode(mode));\n      case 10:\n        return _context.abrupt(\"return\", _context.sent);\n      case 11:\n      case \"end\":\n        return _context.stop();\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"names":["InterruptionModeAndroid","InterruptionModeIOS","ExponentAV","setIsEnabledAsync","PitchCorrectionQuality","_populateMissingKeys","userAudioMode","defaultAudioMode","key","hasOwnProperty","defaultMode","allowsRecordingIOS","interruptionModeIOS","MixWithOthers","playsInSilentModeIOS","staysActiveInBackground","interruptionModeAndroid","DuckOthers","shouldDuckAndroid","playThroughEarpieceAndroid","currentAudioMode","getCurrentAudioMode","setAudioModeAsync","partialMode","mode","_regeneratorRuntime","async","setAudioModeAsync$","_context","prev","next","Error","awrap","setAudioMode","abrupt","sent","stop","Promise"],"sources":["C:\\Users\\Pc02\\Desktop\\Biscoito\\biscoito-da-sorte\\node_modules\\expo-av\\src\\Audio.ts"],"sourcesContent":["import { AudioMode, InterruptionModeAndroid, InterruptionModeIOS } from './Audio.types';\nimport ExponentAV from './ExponentAV';\n\nexport * from './Audio/Recording';\nexport * from './Audio/Sound';\nexport { setIsEnabledAsync } from './Audio/AudioAvailability';\nexport { PitchCorrectionQuality } from './AV';\n\nconst _populateMissingKeys = (\n  userAudioMode: Partial<AudioMode>,\n  defaultAudioMode: AudioMode\n): AudioMode => {\n  for (const key in defaultAudioMode) {\n    if (!userAudioMode.hasOwnProperty(key)) {\n      userAudioMode[key] = defaultAudioMode[key];\n    }\n  }\n  return userAudioMode as AudioMode;\n};\n\nconst defaultMode: AudioMode = {\n  allowsRecordingIOS: false,\n  interruptionModeIOS: InterruptionModeIOS.MixWithOthers,\n  playsInSilentModeIOS: false,\n  staysActiveInBackground: false,\n  interruptionModeAndroid: InterruptionModeAndroid.DuckOthers,\n  shouldDuckAndroid: true,\n  playThroughEarpieceAndroid: false,\n};\n\nlet currentAudioMode: AudioMode | null = null;\n\nfunction getCurrentAudioMode(): AudioMode {\n  if (!currentAudioMode) {\n    return defaultMode;\n  }\n  return currentAudioMode;\n}\n\nexport async function setAudioModeAsync(partialMode: Partial<AudioMode>): Promise<void> {\n  const mode = _populateMissingKeys(partialMode, getCurrentAudioMode());\n\n  if (!InterruptionModeIOS[mode.interruptionModeIOS]) {\n    throw new Error(`\"interruptionModeIOS\" was set to an invalid value.`);\n  }\n  if (!InterruptionModeAndroid[mode.interruptionModeAndroid]) {\n    throw new Error(`\"interruptionModeAndroid\" was set to an invalid value.`);\n  }\n  if (\n    typeof mode.allowsRecordingIOS !== 'boolean' ||\n    typeof mode.playsInSilentModeIOS !== 'boolean' ||\n    typeof mode.staysActiveInBackground !== 'boolean' ||\n    typeof mode.shouldDuckAndroid !== 'boolean' ||\n    typeof mode.playThroughEarpieceAndroid !== 'boolean'\n  ) {\n    throw new Error(\n      '\"allowsRecordingIOS\", \"playsInSilentModeIOS\", \"playThroughEarpieceAndroid\", \"staysActiveInBackground\" and \"shouldDuckAndroid\" must be booleans.'\n    );\n  }\n  currentAudioMode = mode;\n  return await ExponentAV.setAudioMode(mode);\n}\n"],"mappings":";AAAA,SAAoBA,uBAAuB,EAAEC,mBAAmB;AAChE,OAAOC,UAAU;AAEjB;AACA;AACA,SAASC,iBAAiB;AAC1B,SAASC,sBAAsB;AAE/B,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAoBA,CACxBC,aAAiC,EACjCC,gBAA2B,EACd;EACb,KAAK,IAAMC,GAAG,IAAID,gBAAgB,EAAE;IAClC,IAAI,CAACD,aAAa,CAACG,cAAc,CAACD,GAAG,CAAC,EAAE;MACtCF,aAAa,CAACE,GAAG,CAAC,GAAGD,gBAAgB,CAACC,GAAG,CAAC;;;EAG9C,OAAOF,aAA0B;AACnC,CAAC;AAED,IAAMI,WAAW,GAAc;EAC7BC,kBAAkB,EAAE,KAAK;EACzBC,mBAAmB,EAAEX,mBAAmB,CAACY,aAAa;EACtDC,oBAAoB,EAAE,KAAK;EAC3BC,uBAAuB,EAAE,KAAK;EAC9BC,uBAAuB,EAAEhB,uBAAuB,CAACiB,UAAU;EAC3DC,iBAAiB,EAAE,IAAI;EACvBC,0BAA0B,EAAE;CAC7B;AAED,IAAIC,gBAAgB,GAAqB,IAAI;AAE7C,SAASC,mBAAmBA,CAAA;EAC1B,IAAI,CAACD,gBAAgB,EAAE;IACrB,OAAOV,WAAW;;EAEpB,OAAOU,gBAAgB;AACzB;AAEA,OAAO,SAAeE,iBAAiBA,CAACC,WAA+B;EAAA,IAAAC,IAAA;EAAA,OAAAC,mBAAA,CAAAC,KAAA,UAAAC,mBAAAC,QAAA;IAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;MAAA;QAC/DN,IAAI,GAAGnB,oBAAoB,CAACkB,WAAW,EAAEF,mBAAmB,EAAE,CAAC;QAAA,IAEhEpB,mBAAmB,CAACuB,IAAI,CAACZ,mBAAmB,CAAC;UAAAgB,QAAA,CAAAE,IAAA;UAAA;QAAA;QAAA,MAC1C,IAAIC,KAAK,uDAAqD,CAAC;MAAA;QAAA,IAElE/B,uBAAuB,CAACwB,IAAI,CAACR,uBAAuB,CAAC;UAAAY,QAAA,CAAAE,IAAA;UAAA;QAAA;QAAA,MAClD,IAAIC,KAAK,2DAAyD,CAAC;MAAA;QAAA,MAGzE,OAAOP,IAAI,CAACb,kBAAkB,KAAK,SAAS,IAC5C,OAAOa,IAAI,CAACV,oBAAoB,KAAK,SAAS,IAC9C,OAAOU,IAAI,CAACT,uBAAuB,KAAK,SAAS,IACjD,OAAOS,IAAI,CAACN,iBAAiB,KAAK,SAAS,IAC3C,OAAOM,IAAI,CAACL,0BAA0B,KAAK,SAAS;UAAAS,QAAA,CAAAE,IAAA;UAAA;QAAA;QAAA,MAE9C,IAAIC,KAAK,CACb,iJAAiJ,CAClJ;MAAA;QAEHX,gBAAgB,GAAGI,IAAI;QAACI,QAAA,CAAAE,IAAA;QAAA,OAAAL,mBAAA,CAAAO,KAAA,CACX9B,UAAU,CAAC+B,YAAY,CAACT,IAAI,CAAC;MAAA;QAAA,OAAAI,QAAA,CAAAM,MAAA,WAAAN,QAAA,CAAAO,IAAA;MAAA;MAAA;QAAA,OAAAP,QAAA,CAAAQ,IAAA;IAAA;EAAA,qBAAAC,OAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}